# -*- coding: utf-8 -*-
"""anywhere.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dKvk7kZzZBh5VAysbV3nMHmzcnq1-TuX
"""

import os
import firebase_admin
from firebase_admin import credentials, firestore, auth
from flask import Flask, request, jsonify
import pyqrcode
from PyQt5 import QtWidgets, uic
import sys
import requests
from cryptography.fernet import Fernet

# --- Firebase Setup ---
FIREBASE_CREDENTIALS = "path/to/your/firebase-credentials.json"
DATABASE_URL = "https://your-database-name.firebaseio.com"

cred = credentials.Certificate(FIREBASE_CREDENTIALS)
firebase_admin.initialize_app(cred, {
    'databaseURL': DATABASE_URL
})
db = firestore.client()

# Encryption Key
ENCRYPTION_KEY = Fernet.generate_key()
cipher = Fernet(ENCRYPTION_KEY)

# --- Flask Server ---
app = Flask(__name__)

@app.route('/register', methods=['POST'])
def register_device():
    data = request.json
    device_id = data.get('device_id')
    user_id = data.get('user_id')
    if not device_id or not user_id:
        return jsonify({"error": "Invalid input"}), 400

    db.collection('devices').document(device_id).set({
        'user_id': user_id,
        'status': 'active'
    })
    return jsonify({"message": "Device registered successfully"}), 200

@app.route('/sync', methods=['POST'])
def sync_data():
    data = request.json
    device_id = data.get('device_id')
    encrypted_data = cipher.encrypt(str(data.get('data')).encode())

    db.collection('sync_data').document(device_id).set({
        'data': encrypted_data.decode()
    })
    return jsonify({"message": "Data synchronized successfully"}), 200

@app.route('/access', methods=['GET'])
def access_data():
    device_id = request.args.get('device_id')
    if not device_id:
        return jsonify({"error": "Device ID is required"}), 400

    doc = db.collection('sync_data').document(device_id).get()
    if not doc.exists:
        return jsonify({"error": "No data found for the device"}), 404

    encrypted_data = doc.to_dict()['data']
    decrypted_data = cipher.decrypt(encrypted_data.encode()).decode()

    return jsonify({"data": decrypted_data}), 200

if __name__ == '__main__':
    app.run(debug=True)

# --- PyQt GUI ---
class RemoteAccessApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Remote Access Setup')
        self.setGeometry(100, 100, 600, 400)

        # QR Code Generation Button
        self.qr_button = QtWidgets.QPushButton('Generate QR Code', self)
        self.qr_button.setGeometry(200, 50, 200, 50)
        self.qr_button.clicked.connect(self.generate_qr)

        # Sync Button
        self.sync_button = QtWidgets.QPushButton('Sync Data', self)
        self.sync_button.setGeometry(200, 150, 200, 50)
        self.sync_button.clicked.connect(self.sync_data)

        # Access Button
        self.access_button = QtWidgets.QPushButton('Access Data', self)
        self.access_button.setGeometry(200, 250, 200, 50)
        self.access_button.clicked.connect(self.access_data)

    def generate_qr(self):
        device_id = "example_device_id"
        qr = pyqrcode.create(device_id)
        qr.png("device_qr.png", scale=6)
        QtWidgets.QMessageBox.information(self, "QR Code", "QR Code generated as device_qr.png")

    def sync_data(self):
        data = {
            "device_id": "example_device_id",
            "data": {"contacts": ["Alice", "Bob"]}
        }
        response = requests.post("http://127.0.0.1:5000/sync", json=data)
        if response.status_code == 200:
            QtWidgets.QMessageBox.information(self, "Sync", "Data synchronized successfully")
        else:
            QtWidgets.QMessageBox.warning(self, "Sync", "Failed to synchronize data")

    def access_data(self):
        response = requests.get("http://127.0.0.1:5000/access?device_id=example_device_id")
        if response.status_code == 200:
            data = response.json()["data"]
            QtWidgets.QMessageBox.information(self, "Access", f"Data: {data}")
        else:
            QtWidgets.QMessageBox.warning(self, "Access", "Failed to access data")

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = RemoteAccessApp()
    window.show()
    sys.exit(app.exec_())